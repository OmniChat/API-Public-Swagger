{
  "swagger": "2.0",
  "info": {
    "version": "2017-08-04T18:44:54Z",
    "title": "OmniChat-dev"
  },
  "host": "dev-api.omni.chat",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/customers": {
      "get": {
        "description": "Listar clientes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limitar o número de objetos retornados",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "description": "Chave de autorização obtida da OmniChat que autoriza o uso da API. Deve ser utilizado em conjunto com a api-key",
            "required": true,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Ordenar a resposta usando qual propriedade",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Quantos objetos deverão ser pulados. Pode ser usado em conjunto com offset para paginação ",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de clientes",
            "schema": {
              "$ref": "#/definitions/Customers"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "NewCustomer",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewCustomer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "201 response",
            "schema": {
              "$ref": "#/definitions/CreateObjectResponse"
            }
          },
          "400": {
            "description": "400 response"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/customers/count": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-secret",
            "in": "header",
            "description": "chave de autorização obtida da OmniChat que autoriza o uso da API. Deve ser utilizado em conjunto com a api-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/CountResult"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/customers/{objectId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "description": "chave de autorização obtida da OmniChat que autoriza o uso da API. Deve ser utilizado em conjunto com a api-key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/ResponseError"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/UpdatedObject"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/ResponseError"
            }
          },
          "500": {
            "description": "500 response"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/ResponseError"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/orders": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/orders/count": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/CountResult"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/orders/{objectId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/ResponseError"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/products": {
      "get": {
        "description": "Listar produtos",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of objects returned by the query",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Specify a field to sort by",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "description": "Criar produto",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "NewProduct",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewProduct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "201 response",
            "schema": {
              "$ref": "#/definitions/CreateObjectResponse"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/ResponseError"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/ResponseError"
            }
          },
          "500": {
            "description": "500 response",
            "schema": {
              "$ref": "#/definitions/ResponseError"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/products/count": {
      "get": {
        "description": "Contar produtos",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/CountResult"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/products/{objectId}": {
      "get": {
        "description": "Obter um produto",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "The unique id for the requested object",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/ResponseError"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "description": "Alterar um produto existente",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/UpdatedObject"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/ResponseError"
            }
          },
          "500": {
            "description": "500 response"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "description": "Remover um produto e suas variantes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "The object id to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/ResponseError"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/products/{objectId}/variants": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "The unique id for the requested object",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of objects returned by the query",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Specify a field to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Use with limit to paginate through results",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/products/{objectId}/variants/count": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "The unique id for the requested object",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/products/{objectId}/variants/{variantId}": {
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "variantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "variantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "description": "The object id to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "x-api-key",
      "in": "header"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "format": "uuid10",
          "description": "The unique identifier for the product. Product objectIds are unique across the entire OmniChat platform; no two products will have the same objectIds, even if they are from different shops"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was created. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was last modified. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "canAcceptBoleto": {
          "type": "object",
          "description": "If this order can be paid using boleto",
          "properties": {}
        },
        "boletoInstructions": {
          "type": "object",
          "description": "Instructions in regards to boleto payment for this order",
          "properties": {
            "dueDate": {
              "type": "string",
              "description": "The due date of the boleto. If installments is greater than 1, then this is the due date of the first installment"
            },
            "installments": {
              "type": "string",
              "description": "The number of boletos being created"
            }
          }
        },
        "canAcceptCreditCard": {
          "type": "boolean",
          "description": "If this order can be paid using boleto"
        },
        "creditCardInstructions": {
          "type": "object",
          "description": "Instructions in regards to credit card payment for this order",
          "properties": {
            "installments": {
              "type": "string",
              "description": "The number of boletos being created"
            }
          }
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "deliveryTime": {
          "type": "string",
          "description": "How long this order will take to be delivered to the customer"
        },
        "freightCost": {
          "type": "number",
          "description": "The freight cost"
        },
        "freightCostAdjusted": {
          "type": "number",
          "description": "The freight cost adjusted by the sales person. Cannot be greated than freightCost"
        },
        "discountMode": {
          "description": "How the discount is calculated",
          "$ref": "#/definitions/OrderDiscountModeEnum"
        },
        "discount": {
          "type": "number",
          "description": "The discount ammount"
        },
        "paymentInstallmentsCount": {
          "type": "number",
          "description": "The number of installmented selected by the customer to pay for this order"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "pickUpInStore": {
          "type": "boolean",
          "description": "If the customer will pick up the goods in store"
        },
        "shippingAddress": {
          "$ref": "#/definitions/Address"
        },
        "shippingMethod": {
          "type": "string",
          "description": "The shipping method"
        },
        "paymentMethod": {
          "description": "How the customer paid for this order",
          "$ref": "#/definitions/OrderPaymentMethodEnum"
        },
        "status": {
          "description": "The current order status",
          "$ref": "#/definitions/OrderStatusEnum"
        },
        "orderGwId": {
          "type": "string",
          "description": "The order gateway unique ideintification for this order"
        }
      }
    },
    "Orders": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        }
      }
    },
    "OrderDiscountModeEnum": {
      "type": "string",
      "enum": [
        "PERCENTAGE",
        "ABOSOLUTE"
      ]
    },
    "Products": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "format": "uuid10",
          "description": "The unique identifier for the product. Product objectIds are unique across the entire OmniChat platform; no two products will have the same objectIds, even if they are from different shops"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was created. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was last modified. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "name": {
          "type": "string",
          "description": "The name of the user"
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user"
        },
        "username": {
          "type": "string",
          "description": "The username of the user"
        },
        "email": {
          "type": "string",
          "description": "The email of the user"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "format": "uuid10",
          "description": "The unique identifier for the product. Product objectIds are unique across the entire OmniChat platform; no two products will have the same objectIds, even if they are from different shops"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was created. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was last modified. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "name": {
          "type": "string",
          "description": "The reference for this address. For example 'Hone'"
        },
        "addressLine1": {
          "type": "string",
          "description": "The first address line. Usually the street name"
        },
        "addressLine2": {
          "type": "string",
          "description": "The second address line. Usually the address additiona info for example 'room 14'"
        },
        "number": {
          "type": "string",
          "description": "The address number"
        },
        "suburb": {
          "type": "string",
          "description": "The suburb"
        },
        "addressState": {
          "type": "string",
          "description": "The state"
        },
        "country": {
          "type": "string",
          "description": "The country.hree letter country code. Format ISO 3166-1. Example for Brasil the code is BRA"
        },
        "zip": {
          "type": "string",
          "description": "The zip code"
        },
        "recipient": {
          "type": "string",
          "description": "The name of the person that will be the receiver of a order, only applies then this is a shipping address"
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "format": "uuid10",
          "description": "The unique identifier for the product. Product objectIds are unique across the entire OmniChat platform; no two products will have the same objectIds, even if they are from different shops"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was created. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was last modified. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "name": {
          "type": "string",
          "description": "The name of the customer"
        },
        "lastName": {
          "type": "string",
          "description": "The lastname of the customer"
        },
        "acceptsMarketing": {
          "type": "string",
          "description": "If the customer accpets to receive be part of marketing campaigns"
        },
        "email": {
          "type": "string",
          "description": "The email of the customer"
        },
        "phoneAreaCode": {
          "type": "string",
          "description": "The phone are code"
        },
        "phoneCountryCode": {
          "type": "string",
          "description": "The phone country code"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number"
        },
        "businessName": {
          "type": "string",
          "description": "The business name if the user represents a company"
        },
        "birthDate": {
          "type": "string",
          "description": "The date of birth"
        },
        "businessAccount": {
          "type": "boolean",
          "description": "Whether this customer represents a business"
        },
        "taxDocumentNumber": {
          "type": "string",
          "description": "The customer tax document, in Brazil it is his or her CPF"
        },
        "address": {
          "type": "array",
          "description": "The customer shipping address",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "externalImageUrl": {
          "type": "string",
          "description": "The phone number"
        },
        "gender": {
          "type": "string",
          "description": "The phone number"
        }
      }
    },
    "ResponseError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "number",
          "description": "The error code"
        },
        "error": {
          "type": "string",
          "description": "The error description"
        }
      }
    },
    "OrderStatusEnum": {
      "type": "string",
      "enum": [
        "CREATING",
        "CREATED",
        "PROVISIONING",
        "OPEN",
        "WAITING",
        "PAID",
        "PACKAGED",
        "SHIPPED",
        "PARTIALLY_SHIPPED",
        "DELIVERED",
        "NOT_PAID",
        "PARTIAL_PAID",
        "OVER_PAID",
        "CANCELLED",
        "REVERTED",
        "ERROR"
      ]
    },
    "Product": {
      "type": "object",
      "required": [
        "mainVariant",
        "name",
        "variants"
      ],
      "properties": {
        "objectId": {
          "type": "string",
          "format": "uuid10",
          "description": "The unique identifier for the product. Product objectIds are unique across the entire OmniChat platform; no two products will have the same objectIds, even if they are from different shops"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was created. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was last modified. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "name": {
          "type": "string",
          "description": "The name of the product"
        },
        "definition1": {
          "type": "string",
          "description": "The name of the first definition for the product. Example: Color"
        },
        "definition1Values": {
          "type": "array",
          "description": "The possible values of the first definition for the product. Example: Blue, Green, Black",
          "items": {
            "type": "string"
          }
        },
        "definition2": {
          "type": "string",
          "description": "The name of the second definition for the product. Example: Size"
        },
        "definition2Values": {
          "type": "array",
          "description": "The possible values of the second definition for the product. Example: P, M, G",
          "items": {
            "type": "string"
          }
        },
        "erpId": {
          "type": "string",
          "description": "The ERP's code related to the product"
        },
        "blocked": {
          "type": "boolean",
          "description": "Indicated wheater the product is blocked for sale. Blocked products will be listed in the products tab however they cannot be added to orders",
          "default": false
        },
        "service": {
          "type": "boolean",
          "description": "If true the product represents a service",
          "default": false
        },
        "trackInventory": {
          "type": "boolean",
          "description": "If true the OmniChat will track inventory. When a new order is created the product quantity will be decremented. If an order gets cancelled the quantity will be restored",
          "default": false
        },
        "sellOutOfStock": {
          "type": "boolean",
          "description": "Whether the product can be added to an order when the quantity is equal or less than zero",
          "default": false
        },
        "mainVariant": {
          "$ref": "#/definitions/Variant"
        },
        "variants": {
          "type": "array",
          "description": "The product's variants. Including the mainVariant",
          "items": {
            "$ref": "#/definitions/Variant"
          }
        }
      }
    },
    "UpdatedObject": {
      "type": "object",
      "properties": {
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was last modified. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        }
      }
    },
    "CountResult": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        }
      }
    },
    "NewCustomer": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the customer"
        },
        "lastName": {
          "type": "string",
          "description": "The lastname of the customer"
        },
        "acceptsMarketing": {
          "type": "string",
          "description": "If the customer accpets to receive be part of marketing campaigns"
        },
        "email": {
          "type": "string",
          "description": "The email of the customer"
        },
        "phoneAreaCode": {
          "type": "string",
          "description": "The phone are code"
        },
        "phoneCountryCode": {
          "type": "string",
          "description": "The phone country code"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number"
        },
        "businessName": {
          "type": "string",
          "description": "The business name if the user represents a company"
        },
        "birthDate": {
          "type": "string",
          "description": "The date of birth"
        },
        "businessAccount": {
          "type": "boolean",
          "description": "Whether this customer represents a business"
        },
        "taxDocumentNumber": {
          "type": "string",
          "description": "The customer tax document, in Brazil it is his or her CPF"
        },
        "address": {
          "type": "array",
          "description": "The customer shipping address",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "externalImageUrl": {
          "type": "string",
          "description": "The phone number"
        },
        "gender": {
          "type": "string",
          "description": "The phone number"
        }
      }
    },
    "CreateObjectResponse": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "format": "uuid10",
          "description": "The unique identifier for the product. Product objectIds are unique across the entire OmniChat platform; no two products will have the same objectIds, even if they are from different shops"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was created. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        }
      }
    },
    "Variant": {
      "type": "object",
      "required": [
        "price",
        "quantity"
      ],
      "properties": {
        "weight": {
          "type": "number",
          "description": "The weight of the variant in grams",
          "minimum": 0
        },
        "length": {
          "type": "number",
          "description": "The length of the variant in centimeters",
          "minimum": 0
        },
        "height": {
          "type": "number",
          "description": "The height of the variant in centimeters",
          "minimum": 0
        },
        "width": {
          "type": "number",
          "description": "The width of thevariant in centimeters",
          "minimum": 0
        },
        "price": {
          "type": "number",
          "description": "The price of the variant in the local currency",
          "minimum": 0
        },
        "salePrice": {
          "type": "number",
          "description": "The price of the variant in the local currency",
          "minimum": 0
        },
        "quantity": {
          "type": "integer",
          "description": "The variant stock, only applies when product.trackInventory is set to true",
          "minimum": 0
        },
        "erpId": {
          "type": "string",
          "description": "The ERP's code related to the variant"
        },
        "definition1Value": {
          "type": "string",
          "description": "The value of the first definition for the variant. Example: Blue"
        },
        "definition2Value": {
          "type": "string",
          "description": "The value of the second definition for the variant. Example: P"
        },
        "externalImageURL": {
          "type": "string",
          "format": "url",
          "description": "The url for this variant image"
        },
        "visible": {
          "type": "boolean",
          "description": "If set to false the variant will not be listed as available to be added to an order",
          "default": true
        }
      }
    },
    "Item": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "format": "uuid10",
          "description": "The unique identifier for the product. Product objectIds are unique across the entire OmniChat platform; no two products will have the same objectIds, even if they are from different shops"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was created. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was last modified. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "product": {
          "type": "string",
          "description": "A short description of this item"
        },
        "detail": {
          "type": "string",
          "description": "More details about this item"
        },
        "price": {
          "type": "number",
          "description": "The price of this item"
        },
        "productReference": {
          "type": "string",
          "description": "the refernce code for this item"
        },
        "quantity": {
          "type": "number",
          "description": "The quantity of this item"
        },
        "variant": {
          "description": "The related product variant that this item came from",
          "$ref": "#/definitions/Variant"
        },
        "weight": {
          "type": "number",
          "description": "How long this order will take to be delivered to the customer"
        },
        "length": {
          "type": "number",
          "description": "How long this order will take to be delivered to the customer"
        },
        "width": {
          "type": "number",
          "description": "How long this order will take to be delivered to the customer"
        }
      }
    },
    "Empty": {
      "type": "object",
      "title": "Empty Schema"
    },
    "Customers": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Customer"
          }
        }
      },
      "description": "O cliente (customers) é o comprador cadastrado na loja e que pode efetuar pedidos. Pode ser do tipo pessoa física ou jurídica."
    },
    "Note": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "format": "uuid10",
          "description": "The unique identifier for the product. Product objectIds are unique across the entire OmniChat platform; no two products will have the same objectIds, even if they are from different shops"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was created. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time when the product was last modified. The API returns this value in ISO 8601 format UTC time. Example: 2017-08-04T16:27:55.397Z"
        },
        "text": {
          "type": "boolean",
          "description": "How long this order will take to be delivered to the customer"
        },
        "salesPerson": {
          "description": "The user that wrote this note",
          "$ref": "#/definitions/User"
        }
      }
    },
    "OrderPaymentMethodEnum": {
      "type": "string",
      "enum": [
        "CREDITCARD",
        "BOLETO"
      ]
    },
    "NewProduct": {
      "type": "object",
      "required": [
        "mainVariant",
        "name",
        "variants"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the product"
        },
        "definition1": {
          "type": "string",
          "description": "The name of the first definition for the product. Example: Color"
        },
        "definition1Values": {
          "type": "array",
          "description": "The possible values of the first definition for the product. Example: Blue, Green, Black",
          "items": {
            "type": "string"
          }
        },
        "definition2": {
          "type": "string",
          "description": "The name of the second definition for the product. Example: Size"
        },
        "definition2Values": {
          "type": "array",
          "description": "The possible values of the second definition for the product. Example: P, M, G",
          "items": {
            "type": "string"
          }
        },
        "erpId": {
          "type": "string",
          "description": "The ERP's code related to the product"
        },
        "blocked": {
          "type": "boolean",
          "description": "Indicated wheater the product is blocked for sale. Blocked products will be listed in the products tab however they cannot be added to orders",
          "default": false
        },
        "service": {
          "type": "boolean",
          "description": "If true the product represents a service",
          "default": false
        },
        "trackInventory": {
          "type": "boolean",
          "description": "If true the OmniChat will track inventory. When a new order is created the product quantity will be decremented. If an order gets cancelled the quantity will be restored",
          "default": false
        },
        "sellOutOfStock": {
          "type": "boolean",
          "description": "Whether the product can be added to an order when the quantity is equal or less than zero",
          "default": false
        },
        "mainVariant": {
          "$ref": "#/definitions/Variant"
        },
        "variants": {
          "type": "array",
          "description": "The product's variants. Including the mainVariant",
          "items": {
            "$ref": "#/definitions/Variant"
          }
        }
      }
    }
  }
}