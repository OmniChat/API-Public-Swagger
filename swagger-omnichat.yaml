---
swagger: "2.0"
info:
  version: "v1.0"
  title: "OmniChat"
  x-logo:
    url: 'https://docs.omni.chat/assets/omnichat_logo.png'
  description: |

    # Introdução
    A API da OmniChat foi desenvolvida de acordo com os melhores padrões REST. 
    Seus endpoints possuem nomes intuitivos que indicam os recursos disponíveis. 
    As operações são feitas de acordo com os verbos HTTP, com corpos de mensagem em JSON. 
    As respostas podem ser interpretadas através do código de status HTTP. 
    Isso permite que quaisquer aplicações consumam a API de forma simples e clara, independente da linguagem utilizada.

    ## Paginação
    Nossa API tem suporte a buscas em massa através dos métodos "GET". Deste modo, vocês podem paginar pela listagem de objetos usando ```limit``` e ```offset```. 
    Todos esses métodos de listagem possuem uma estrutura em comum, que é a de paginação.
    ```curl
    ## List 0 - 99 customers
    curl "https://api.omni.chat/v1/customers?limit=100" \
    -H 'x-api-key: <YOUR_API_KEY>' \
    -H 'x-api-secret: <YOUR_API_SECRET>' \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json'

    ## List 100 - 199 customers
    curl"https://api.omni.chat/v1/customers?limit=100&offset=100" \
    -H 'x-api-key: <YOUR_API_KEY>' \
    -H 'x-api-secret: <YOUR_API_SECRET>' \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json'
    ```

    ## Autenticação
    Para você poder utilizar a API da OmniChat você precisará fornecer duas informações no cabeçalho (HEADER) das suas requisições REST:
      - ```x-api-secret```: Chave de autorização obtida da OmniChat que identifica qual integração criada na sua loja OmniChat esta fazendo esta requisição.
      - ```x-api-key```: Chave de autorização obtida da OmniChat que identifica a sua loja.
    Além disso, devem ainda ser adicionados os headers Content-Type e Accept, com o valor application/json

    Exemplo de uma requisição contendo dos os campo obrigatórios:
    ```curl
    ## Count customers
    curl "https://api.omni.chat/v1/customers/count"
    -H "x-api-key: xR2DkhOEDsazac7iiaV6U9kwYJ3l26SIaE6UGVg2"
    -H "x-api-secret: r:0dfa3a7d4ffd4010c055d8f745bf8164"
    -H "Content-Type: application/json"
    ```

    ## Endpoint
    As chamadas para a API devem ser feitas para o mesmo endpoint:
    `https://api.omni.chat/v1`

    ## Filtros
    Existem várias maneiras de colocar filtros nos objetos encontrados, usando o parâmetro *where* na URL da chamada REST. 
    O valor do parâmetro *where* deve ser codificado como JSON.
    Assim, se você olhar para o URL real solicitado, ele seria codificado em JSON e depois codificado como URL. 
    O uso mais simples do parâmetro *where* está filtrando o valor das propriedades. 

    Por exemplo, para filtrar todos os pedidos que estão como status de pago:
    ```curl
      curl "https://api.omni.chat/v1/products \
      -H 'x-api-key: <YOUR_API_KEY>' \
      -H 'x-api-secret: <YOUR_API_SECRET>' \
      -H 'Content-Type: application/json' \
      -H "Accept: application/json" \
      --data-urlencode 'where={"status":"PAID"}'  
    ```

    ### Operações
    Os valores do parâmetro *where* também suportam comparações além da correspondência exata. 
    Em vez de um valor exato, forneça um JSON com as chaves correspondentes às comparações a serem feitas. 
    O parâmetro *where* aceita estas opções:
    | Key     | Operação                   |
    |---------|----------------------------|
    | $lt     | Less Than                  |
    | $lte    | Less Than Or Equal To      |
    | $gt     | Greater Than               |
    | $gte    | Greater ThanOr Equal To    |
    | $ne     | Not Equal To               |
    | $in     | Contained In               |
    | $nin    | Not Contained in           |
    | $exists | A value is set for the key |

    ### Exemplos
    Listar todos os pedidos com desconto maior que 10%
    ```curl
      curl "https://api.omni.chat/v1/orders \
      -H 'x-api-key: <YOUR_API_KEY>' \
      -H 'x-api-secret: <YOUR_API_SECRET>' \
      -H 'Content-Type: application/json' \
      -H "Accept: application/json" \
      --data-urlencode 'where={"discountMode":"percentage", "discount":{"$gte": 10}}'
    ```

    Para lista todos os pedidos com status *PAID* ou *SHIPPED*:
      ```curl
      curl "https://api.omni.chat/v1/orders \
      -H 'x-api-key: <YOUR_API_KEY>' \
      -H 'x-api-secret: <YOUR_API_SECRET>' \
      -H 'Content-Type: application/json' \
      -H "Accept: application/json" \
      --data-urlencode 'where={"status":{"$in": ["PAID","SHIPPED"] }}'
      ```
    
    Todos os produtos que tenham algum valor em *definition1*:
    ```curl
      curl "https://api.omni.chat/v1/products \
      -H 'x-api-key: <YOUR_API_KEY>' \
      -H 'x-api-secret: <YOUR_API_SECRET>' \
      -H 'Content-Type: application/json' \
      -H "Accept: application/json" \
      --data-urlencode 'where={"definition1":{"$exists": true }}' 
      ```

    Todos os clientes atualizados após 5/Set/2017:
    ```curl
    curl "https://api.omni.chat/v1/customers \
    -H 'x-api-key: <YOUR_API_KEY>' \
    -H 'x-api-secret: <YOUR_API_SECRET>' \
    -H 'Content-Type: application/json' \
    -H "Accept: application/json" \
    --data-urlencode 'where={"updatedAt":{"$gte":{"__type":"Date","iso":"2017-09-05T03:00:00.000Z"}}}' 
    ```
    Uma observação importante no exemplo anterior. 
    Como JSON não possui um mecanismo formal para inclusão de propriedades do tipo Date, nossa API padronizou o seguinte formato:
      ```json
      {
        "__type": "Date",
        "iso": "2011-08-21T18:02:52.249Z"
      }
      ```
    A propriedade iso contem um UTC timestamp no formato ISO 8601 com precisão de milisegundos: `YYYY-MM-DDTHH:MM:SS.MMMZ`
    
    ## Modelo
    A OmniChat utiliza uma base de dados NoSQL para melhor performance e escalabilidade.
    Para que um objeto possa ser relacionado com outro primeiro você precisa criar o objeto na OmniChat para obter o *objectId* do mesmo. 
    Com o *objectId* do objeto você pode incluir em uma relação.

    Todos os objetos possuem 3 propriedades criadas pelo Backend após ele ser salvo. 
    O Backend responde qualquer *POST* com objectId e createdAt e qualquer PUT com o *updatedAt*

    | Propriedade | Descrição                                                                                                      | Exemplo                  |
    |-------------|----------------------------------------------------------------------------------------------------------------|--------------------------|
    | objectId    | Identificador único deste objeto na base de dados da OmniChat                                                  | S3madcbe9H               |
    | createdAt   | A data e a hora que este objeto foi criado. API retorna o valor no formato ISO 8601 em UTC                     | 2017-08-04T16:27:55.397Z |
    | updatedAt   | A data e a hora que este objeto foi modificado pela última vez. API retorna o valor no formato ISO 8601 em UTC | 2017-08-04T16:27:55.397Z |


host: "api.omni.chat"
basePath: "/v1"
schemes:
- "https"
tags:
  - name: chats
    description: Representa uma conversa entre um cliente e a loja. Possui uma ou mais mensagens relacionadas.
  - name: customers
    description: O cliente (customers) é o comprador cadastrado na loja e que pode efetuar pedidos. Pode ser do tipo pessoa física ou jurídica. Deve ter um endereço de entrega associados a ele. 
  - name: products
    description: Produtos são itens vendidos por uma loja na OmniChat. Na criação de um pedido (order) ele será convertido em um item. Um produto pode ter variantes, que são diferentes opções do produto, como por exemplo, cor e tamanho.
  - name: orders
    description: Um Pedido é a conclusão da compra de um ou mais produtos da loja.
paths:
  /chats:
    get:
      tags:
        - chats
      description: "listar conversas"
      produces:
      - "application/json"
      parameters:
      - name: "where"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Chats"
      security:
      - api_key: []
      - api_secret: []
  /chats/count:
    get:
      tags:
      - chats
      description: "Contar conversas"
      produces:
      - "application/json"
      parameters:
      - name: "where"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ResponseCount"
      security:
      - api_key: []
      - api_secret: []
  /chats/{objectId}:
    get:
      tags:
      - chats
      description: "Obert uma unica conversa baseada no seu identificador unico"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Chat"
        404:
          description: "Error"
          schema:
            $ref: "#/definitions/ResponseError"
      security:
      - api_key: []
      - api_secret: []
  /chats/{objectId}/messages:
    get:
      tags:
      - chats
      description: "Listar mensagens"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Messages"
      security:
      - api_key: []
      - api_secret: []
  /chats/{objectId}/messages/count:
    get:
      tags:
      - chats
      description: "numero de mensagens desta conversa"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ResponseCount"
      security:
      - api_key: []
      - api_secret: []
  /chats/{objectId}/messages/{messageId}:
    get:
      tags:
      - chats
      description: "Obter uma única mensagem a partir de seu identificador unico"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      - name: "messageId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Message"
        400:
          description: Invalid ID supplied
        404:
          description: Message not found
      security:
      - api_key: []
      - api_secret: []
  /customers:
    get:
      tags:
      - customers
      description: "listar clientes"
      produces:
      - "application/json"
      parameters:
      - name: "where"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Customers"
      security:
      - api_key: []
    post:
      tags:
      - customers
      description: "criar cliente"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "NewCustomer"
        required: true
        schema:
          $ref: "#/definitions/NewCustomer"
      responses:
        201:
          description: "201 response"
          schema:
            $ref: "#/definitions/ResponseObjectCreate"
        400:
          description: "400 response"
      security:
      - api_key: []
  /customers/count:
    get:
      tags:
      - customers
      description: "contar clientes"
      produces:
      - "application/json"
      parameters:
      - name: "where"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseCount"
      security:
      - api_key: []
  /customers/{objectId}:
    get:
      tags:
      - customers
      description: "obter único cliente"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Customer"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/ResponseError"
      security:
      - api_key: []
    put:
      tags:
      - customers
      description: "atualizar um cliente existente"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ResponseUpdatedObject"
        500:
          description: "Internal Error"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/ResponseError"
      security:
      - api_key: []
    delete:
      tags:
      - customers
      description: "Apagar um cliente"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseEmpty"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/ResponseError"
      security:
      - api_key: []
  /orders:
    get:
      tags:
      - orders
      description: "listar pedidos"
      produces:
      - "application/json"
      parameters:
      - name: "where"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Orders"
      security:
      - api_key: []
  /orders/count:
    get:
      tags:
      - orders
      description: "contar pedidos"
      produces:
      - "application/json"
      parameters:
      - name: "where"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseCount"
      security:
      - api_key: []
  /orders/{objectId}:
    get:
      tags:
      - orders
      description: "obter único pedido"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Order"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/ResponseError"
      security:
      - api_key: []
  /products:
    get:
      tags:
      - products
      description: "listar produtos"
      produces:
      - "application/json"
      parameters:
      - name: "where"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Products"
      security:
      - api_key: []
    post:
      tags:
      - products
      description: "Criar produto"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "NewProduct"
        required: true
        schema:
          $ref: "#/definitions/NewProduct"
      responses:
        201:
          description: "201 response"
          schema:
            $ref: "#/definitions/ResponseObjectCreate"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseError"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/ResponseError"
      security:
      - api_key: []
  /products/count:
    get:
      tags:
      - products
      description: "contar produtos"
      produces:
      - "application/json"
      parameters:
      - name: "where"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseCount"
      security:
      - api_key: []
  /products/{objectId}:
    get:
      tags:
      - products
      description: "obter um único produto"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Product"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/ResponseError"
      security:
      - api_key: []
    put:
      tags:
      - products
      description: "atualizar um produto produto"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseUpdatedObject"
        500:
          description: "500 response"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/ResponseError"
      security:
      - api_key: []
    delete:
      tags:
      - products
      description: "apagar um produto"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseEmpty"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/ResponseError"
      security:
      - api_key: []
  /products/{objectId}/variants:
    get:
      tags:
      - products
      description: "listar variantes de um produto"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Variants"
      security:
      - api_key: []
    post:
      tags:
      - products
      description: "adicionar uma variante a um produto"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseObjectCreate"
      security:
      - api_key: []
  /products/{objectId}/variants/count:
    get:
      tags:
      - products
      description: "contar variantes de um produto"
      produces:
      - "application/json"
      parameters:
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseCount"
      security:
      - api_key: []
  /products/{objectId}/variants/{variantId}:
    put:
      tags:
      - products
      description: "obter uma única variante de um produto"
      produces:
      - "application/json"
      parameters:
      - name: "variantId"
        in: "path"
        required: true
        type: "string"
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseUpdatedObject"
      security:
      - api_key: []
    delete:
      tags:
      - products
      description: "obter uma única variante de um produto"
      produces:
      - "application/json"
      parameters:
      - name: "variantId"
        in: "path"
        required: true
        type: "string"
      - name: "objectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseEmpty"
      security:
      - api_key: []
      - api_secret: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "x-api-key"
    in: "header"
    description: |
      A chave que identifica a sua loja nas chamadas REST desta API. Você encontra a sua chave em https://app.omni.chat/#/home/settings/integration > API
  api_secret:
    type: "apiKey"
    name: "x-api-secret"
    in: "header"
    description: |
      A chave criada dentro da OmniChat para a aplicação que você esta integrando. Cada aplicativo integrado deverá ter uma api_secret diferente.
definitions:
  Orders:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          $ref: "#/definitions/Order"
    description: "Lista de pedidos"
  Products:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          $ref: "#/definitions/Product"
    description: "Lista de produtos"
  Address:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Nome de referência deste endereço. Por exemplo: Casa"
      addressLine1:
        type: "string"
        description: "Primeira linha do endereço, normalmente é no nome da rua."
      addressLine2:
        type: "string"
        description: "Segunda linha do endereço, normalmente é o complemento"
      number:
        type: "string"
        description: "Número"
      suburb:
        type: "string"
        description: "Bairro"
      state:
        type: "string"
        description: "Estado"
      country:
        type: "string"
        description: "Código do pais utilizando o formato ISO 3166-1. Exemplo para\
          \ o Brasil usamos BRA."
      zip:
        type: "string"
        description: "CEP"
  Message:
    type: "object"
    properties:
      objectId:
        type: "string"
        format: "uuid10"
        description: "Identificador único deste objeto na base de dados da OmniChat"
      createdAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi criado. API retorna o valor\
          \ no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      updatedAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi modificado pela última vez.\
          \ API retorna o valor no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      type:
        type: string
        enum:
        - "IMAGE"
        - "TEXT"
        - "AUDIO"
        - "FILE"
        - "VIDEO"
        - "LOCATION"
        - "PRODUCT"
        - "VARIANT"
        - "PAYMENT_REQUEST"
        - "ORDER_CONFIRMATION"
        - "ORDER_STATUS"
        - "COLLECTION"
        description: >
          O tipo da informação que esta mensagem possui<br/>
          * `IMAGE` - Mensagem com imagem<br/>
          * `TEXT` - Mensagem de texto<br/>
          * `AUDIO` - Mensagem com áudio<br/>
          * `FILE` - Mensagem com arquivo em anexo<br/>
          * `VIDEO` - Mensagem de vídeo<br/>
          * `LOCATION` - Mensagem com localização<br/>
          * `PRODUCT` - Mensagem com produto<br/>
          * `VARIANT` - Mensagem com variante<br/>
          * `PAYMENT_REQUEST` - Mensagem solicitando um pagamento<br/>
          * `ORDER_CONFIRMATION` - Mensagem de confirmação de pedido<br/>
          * `ORDER_STATUS` - Mensagem com alteração no status do pedido<br/>
          * `COLLECTION` - Mensagem com uma coleção<br/>
      status:
        type: string
        enum:
        - "OUTGOING_CREATED"
        - "OUTGOING_SENT"
        - "OUTGOING_DELIVERED"
        - "OUTGOING_READ"
        - "OUTGOING_ERROR"
        - "OUTGOING_SILENT"
        - "INCOMING_RECEIVED"
        - "INCOMING_READ"
        description: >
          O status de envio e recebimento desta mensagem. `OUTGOING_*` são mensagens saindo da OmniChat em direção a plataforma de chat do cliente (ex.: Whatsapp). `INCOMING_*` são mensagens recebidas da plataforma de chat do cliente.<br/>
          * `OUTGOING_CREATED` - Mensagem criada e salva na OmniChat<br/>
          * `OUTGOING_SENT` - Mensagem envidaa para a plataforma do cliente<br/>
          * `OUTGOING_DELIVERED` - Mensagem entregue para o cliente<br/>
          * `OUTGOING_READ` - Mensagem lida pelo cliente<br/>
          * `OUTGOING_ERROR` - Mensagem apresentou um erro no seu envio<br/>
          * `OUTGOING_SILENT` - Mensagem existirá apenas na OmniChat, não será enviada para o cliente<br/>
          * `INCOMING_RECEIVED` - Mensagem recebida<br/>
          * `INCOMING_READ` - Mensagem recebida e lida<br/>
      timestamp:
        type: "number"
        format: "Unix Timestamp"
        description: "A data no unix timestamp informado pela plataforma de chat do cliente"
      text:
        type: "string"
        description: "O corpo da mensagem"
      system:
        type: "boolean"
        description: "Mensagem criada pela própria OmniChat. Mensagens automáticas possuem *true* nesta propriedade."
      attachmentUrl:
        type: "string"
        format: "url"
        description: "URL referente a qualquer anexo que a mensagem possa ter"
      user:
        description: "Usuário da OmniChat que enviou esta mensagem"
        $ref: "#/definitions/User"
      order:
        description: "O pedido relacionado a esta mensagem. Só será existente para mensagens com type ORDER"
        $ref: "#/definitions/Order"
      variant:
        description: "A variante relacionada a esta mensagem. Só será existente para mensagens com type VARIANT"
        $ref: "#/definitions/Order"
      product:
        description: "O produto relacionado a esta mensagem. Só será existente para mensagens com type PRODUCT"
        $ref: "#/definitions/Order"
      error:
        type: "string"
        description: "Descrição do erro no envio desta mensagem. Só será existente para mensagens com status OUTGOING_ERROR"

  Customer:
    type: "object"
    properties:
      objectId:
        type: "string"
        format: "uuid10"
        description: "Identificador único deste objeto na base de dados da OmniChat"
      createdAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi criado. API retorna o valor\
          \ no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      updatedAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi modificado pela última vez.\
          \ API retorna o valor no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      name:
        type: "string"
        description: "Nome do cliente"
      lastName:
        type: "string"
        description: "Sobrenome do cliente"
      acceptsMarketing:
        type: "string"
        description: "Se o cliente aceita receber material de marketing"
      email:
        type: "string"
        description: "Email do cliente"
      phoneAreaCode:
        type: "string"
        description: "Código de área do telefone"
      phoneCountryCode:
        type: "string"
        description: "Código do país"
      phoneNumber:
        type: "string"
        description: "Número do telefone"
      businessName:
        type: "string"
        description: "Se o cliente representa uma empresa. Este é o nome da empresa."
      birthDate:
        type: "string"
        description: "Data de nascimento"
      businessAccount:
        type: "boolean"
        description: "Se este cliente representa uma empresa"
      taxDocumentNumber:
        type: "string"
        description: "CPF do cliente"
      address:
        type: "array"
        description: "O endereço de entrega do cliente"
        items:
          $ref: "#/definitions/Address"
      gender:
        description: "Sexo do cliente"
        $ref: "#/definitions/GenderEnum"
  ResponseError:
    type: "object"
    properties:
      code:
        type: "number"
        description: "O código do erro"
      error:
        type: "string"
        description: "Breve descrição do erro"
  OrderStatusEnum:
    type: "string"
    enum:
    - "CREATING"
    - "CREATED"
    - "PROVISIONING"
    - "OPEN"
    - "WAITING"
    - "PAID"
    - "PACKAGED"
    - "SHIPPED"
    - "PARTIALLY_SHIPPED"
    - "DELIVERED"
    - "NOT_PAID"
    - "PARTIAL_PAID"
    - "OVER_PAID"
    - "CANCELLED"
    - "REVERTED"
    - "ERROR"
  Product:
    type: "object"
    required:
    - "mainVariant"
    - "name"
    - "variants"
    properties:
      objectId:
        type: "string"
        format: "uuid10"
        description: "Identificador único deste objeto na base de dados da OmniChat"
      createdAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi criado. API retorna o valor\
          \ no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      updatedAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi modificado pela última vez.\
          \ API retorna o valor no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      name:
        type: "string"
        description: "Nome do produto"
      definition1:
        type: "string"
        description: "O nome da primeira definição do produto. Por exemplo: Cor"
      definition1Values:
        type: "array"
        description: "Todos os possíveis valores da primeira definição do produto.\
          \ Exemplo: Azul, Verde e Preto"
        items:
          type: "string"
      definition2:
        type: "string"
        description: "O nome da segunda definição do produto. Por exemplo: Tamanho"
      definition2Values:
        type: "array"
        description: "Todos os possíveis valores da primeira definição do produto.\
          \ Exemplo: P, M e G"
        items:
          type: "string"
      erpId:
        type: "string"
        description: "Código utilizado no sistema de ERP para identificar este cliente.\
          \ Normalmente é o código de barras"
      blocked:
        type: "boolean"
        description: "Indica se este produto esta bloqueado para vendas. Este produto\
          \ será listado na aba de produtos da OmniChat, mas não será mostrado como\
          \ disponível para inclusão em um pedido"
        default: false
      service:
        type: "boolean"
        description: "Indica se este produto é um serviço"
        default: false
      trackInventory:
        type: "boolean"
        description: "Se verdadeiro a OmniChat irá controla o estoque. Quando um novo\
          \ pedido é criado o estoque da variante é decrementado, quando um pedido\
          \ é cancelado ou não pago o estoque é restaurado"
        default: false
      sellOutOfStock:
        type: "boolean"
        description: "Se este produto pode ser vendido com estoque igual ou inferior\
          \ a zero"
        default: false
      mainVariant:
        description: "A variante principal deste produto"
        $ref: "#/definitions/Variant"
      variants:
        type: "array"
        description: "Todas as variantes deste produto, inclusive a variante principal"
        items:
          $ref: "#/definitions/Variant"
  GenderEnum:
    type: "string"
    enum:
    - "male"
    - "female"
    - "neutral"
    - "other"
  NewCustomer:
    type: "object"
    required:
    - "lastName"
    - "name"
    properties:
      name:
        type: "string"
        description: "Nome do cliente"
      lastName:
        type: "string"
        description: "Sobrenome do cliente"
      acceptsMarketing:
        type: "string"
        description: "Se o cliente aceita receber material de marketing"
        default: "false"
      email:
        type: "string"
        description: "Email do cliente"
      phoneAreaCode:
        type: "string"
        description: "Código de área do telefone"
      phoneCountryCode:
        type: "string"
        description: "Código do país"
        default: "55"
      phoneNumber:
        type: "string"
        description: "Número do telefone"
      birthDate:
        type: "string"
        description: "Data de nascimento"
      businessAccount:
        type: "boolean"
        description: "Se este cliente representa uma empresa"
        default: false
      businessName:
        type: "string"
        description: "Se o cliente representa uma empresa. Este é o nome da empresa."
      taxDocumentNumber:
        type: "string"
        description: "CPF do cliente"
      address:
        type: "array"
        description: "O endereço de entrega do cliente"
        items:
          $ref: "#/definitions/Address"
      gender:
        description: "Sexo do cliente"
        $ref: "#/definitions/GenderEnum"
  Item:
    type: "object"
    properties:
      objectId:
        type: "string"
        format: "uuid10"
        description: "Identificador único deste objeto na base de dados da OmniChat"
      name:
        type: "string"
        description: "Nome deste item. É copiado de product.name quando incluído no\
          \ carrinho"
      description:
        type: "string"
        description: "Detalhes deste item. É copiado de product.detail quando incluí\
          do no carrinho"
      price:
        type: "number"
        description: "Preço deste item"
      productReference:
        type: "string"
        description: "Código de referência deste item. É copiado de variant.erpId"
      quantity:
        type: "number"
        description: "A quantidade deste item"
      variant:
        description: "O objectId da variante que deu origem a este item."
        $ref: "#/definitions/Variant"
      weight:
        type: "number"
        description: "Peso desta item em gramas. É copiado de variant.weight"
        minimum: 0.0
      length:
        type: "number"
        description: "Comprimento desta item em centimetros. É copiado de variant.length"
        minimum: 0.0
      height:
        type: "number"
        description: "Altura desta item em centimetros. É copiado de variant.height"
        minimum: 0.0
      width:
        type: "number"
        description: "Largura desta item em centimetros. É copiado de variant.width"
        minimum: 0.0
  ResponseUpdatedObject:
    type: "object"
    properties:
      updatedAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi modificado pela última vez.\
          \ API retorna o valor no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
  Chat:
    type: "object"
    properties:
      objectId:
        type: "string"
        format: "uuid10"
        description: "Identificador único deste objeto na base de dados da OmniChat"
      createdAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi criado. API retorna o valor\
          \ no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      updatedAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi modificado pela última vez.\
          \ API retorna o valor no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      platform:
        description: "A plataforma (App) que o conversa esta acontecendo"
        $ref: "#/definitions/ChatPlataformEnum"
      platformId:
        type: "string"
        description: "Identificador único desta conversa na plataforma (App)"
      name:
        type: "string"
        description: "Nome do cliente informado pela plataforma"
      imageUrl:
        type: "string"
        description: "Url que contem a foto do cliente"
      user:
        description: "Usuário da OmniChat que esta atualmente conversando neste chat"
        $ref: "#/definitions/User"
      customer:
        description: "O cliente da OmniChat que foi vincludado neste conversa"
        $ref: "#/definitions/Customer"

  ChatPlataformEnum:
    type: "string"
    enum:
    - "WHATSAPP"
    - "FBMESSENGER"

  User:
    type: "object"
    properties:
      name:
          type: "string"
          description: "Nome do usuário na OmniChat"
      lastName:
          type: "string"
          description: "Sobrenome do usuário na OmniChat"
      email:
          type: "string"
          description: "Email do usuário na OmniChat"

  Chats:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          $ref: "#/definitions/Chat"
    description: "Lista de conversas"
  NewProduct:
    type: "object"
    required:
    - "mainVariant"
    - "name"
    - "variants"
    properties:
      name:
        type: "string"
        description: "Nome do produto"
      definition1:
        type: "string"
        description: "O nome da primeira definição do produto. Por exemplo: Cor"
      definition1Values:
        type: "array"
        description: "Todos os possíveis valores da primeira definição do produto.\
          \ Exemplo: Azul, Verde e Preto"
        items:
          type: "string"
      definition2:
        type: "string"
        description: "O nome da segunda definição do produto. Por exemplo: Tamanho"
      definition2Values:
        type: "array"
        description: "Todos os possíveis valores da primeira definição do produto.\
          \ Exemplo: P, M e G"
        items:
          type: "string"
      erpId:
        type: "string"
        description: "Código utilizado no sistema de ERP para identificar este cliente.\
          \ Normalmente é o código de barras"
      blocked:
        type: "boolean"
        description: "Indica se este produto esta bloqueado para vendas. Este produto\
          \ será listado na aba de produtos da OmniChat, mas não será mostrado como\
          \ disponível para inclusão em um pedido"
        default: false
      service:
        type: "boolean"
        description: "Indica se este produto é um serviço"
        default: false
      trackInventory:
        type: "boolean"
        description: "Se verdadeiro a OmniChat irá controla o estoque. Quando um novo\
          \ pedido é criado o estoque da variante é decrementado, quando um pedido\
          \ é cancelado ou não pago o estoque é restaurado"
        default: false
      sellOutOfStock:
        type: "boolean"
        description: "Se este produto pode ser vendido com estoque igual ou inferior\
          \ a zero"
        default: false
      mainVariant:
        description: "A variante principal deste produto"
        $ref: "#/definitions/Variant"
      variants:
        type: "array"
        description: "Todas as variantes deste produto, inclusive a variante principal"
        items:
          $ref: "#/definitions/Variant"
  Order:
    type: "object"
    properties:
      objectId:
        type: "string"
        format: "uuid10"
        description: "Identificador único deste objeto na base de dados da OmniChat"
      createdAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi criado. API retorna o valor\
          \ no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      updatedAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi modificado pela última vez.\
          \ API retorna o valor no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      canAcceptBoleto:
        type: "object"
        description: "Se este pedido pode ser pelo cliente usando boleto"
        properties: {}
      boletoInstructions:
        type: "object"
        description: "Instruções relativas ao pagamento por boleto deste pedido"
        properties:
          dueDate:
            type: "string"
            description: "A data de vencimento do boleto. Se installments for maior\
              \ que 1, então esta é a data de vencimento do 1.o boleto"
          installments:
            type: "string"
            description: "O número de boletos que serão gerados"
      canAcceptCreditCard:
        type: "boolean"
        description: "Se este pedido pode ser pago usando cartão de crédito"
      creditCardInstructions:
        type: "object"
        description: "Instruções relativas ao pagamento por cartão de crédito deste\
          \ pedido"
        properties:
          installments:
            type: "string"
            description: "Máximo de parcelas aceitas para pagamento deste pedido"
      customer:
        description: "Comprador deste pedido"
        $ref: "#/definitions/Customer"
      deliveryTime:
        type: "string"
        description: "Quanto tempo este pedido irá demorar para chegar até o cliente"
      shippingCost:
        type: "number"
        description: "O custo do frete"
      discountMode:
        description: "Como este desconto será calculado"
        $ref: "#/definitions/OrderDiscountModeEnum"
      discount:
        type: "number"
        description: "Valor do desconto"
      paymentInstallmentsCount:
        type: "number"
        description: "Número de parcelas selecionadas pelo cliente para pagamento\
          \ deste pedido. Somente usado para pagamento no cartão de crédito"
      items:
        type: "array"
        description: "Lista de itens deste pedido"
        items:
          $ref: "#/definitions/Item"
      notes:
        type: "array"
        description: "Notas sobre este pedido"
        items:
          $ref: "#/definitions/Note"
      pickUpInStore:
        type: "boolean"
        description: "Se cliente irá buscar este pedido na loja"
      shippingAddress:
        description: "O endereço de entrega deste pedido"
        $ref: "#/definitions/Address"
      shippingMethod:
        type: "string"
        description: "Qual o método de envio para este pedido"
      paymentMethod:
        description: "Como o cliente escolhei pagar por este pedido"
        $ref: "#/definitions/OrderPaymentMethodEnum"
      status:
        description: "O status atual deste pedido"
        $ref: "#/definitions/OrderStatusEnum"
      paymentGatewayId:
        type: "string"
        description: "Identificador único deste pedido no Gateway de pagamento configurado\
          \ nesta loja"
      orderId:
        type: "string"
        description: "Identificador único deste pedido. Automaticamente incrementado\
          \ quando um novo pedido é criado"
  OrderDiscountModeEnum:
    type: "string"
    enum:
    - "PERCENTAGE"
    - "ABOSOLUTE"
  Messages:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          $ref: "#/definitions/Message"
    description: "Lista de mensagens"
  ResponseObjectCreate:
    type: "object"
    properties:
      objectId:
        type: "string"
        format: "uuid10"
        description: "Identificador único deste objeto na base de dados da OmniChat"
      createdAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi criado. API retorna o valor\
          \ no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
  ResponseCount:
    type: "object"
    properties:
      count:
        type: "integer"
        description: "Número de objetos encontrados"
  Variant:
    type: "object"
    properties:
      objectId:
        type: "string"
        format: "uuid10"
        description: "Identificador único deste objeto na base de dados da OmniChat"
      createdAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi criado. API retorna o valor\
          \ no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      updatedAt:
        type: "string"
        format: "date-time"
        description: "A data e a hora que este objeto foi modificado pela última vez.\
          \ API retorna o valor no formato ISO 8601 em UTC. Exemplo: 2017-08-04T16:27:55.397Z"
      weight:
        type: "number"
        description: "Peso desta variante em gramas"
        minimum: 0.0
      length:
        type: "number"
        description: "Comprimento desta variante em centimetros"
        minimum: 0.0
      height:
        type: "number"
        description: "Altura desta variante em centimetros"
        minimum: 0.0
      width:
        type: "number"
        description: "Largura desta variante em centimetros"
        minimum: 0.0
      price:
        type: "number"
        description: "Preço desta variante"
        minimum: 0.0
      salePrice:
        type: "number"
        description: "Promoção desta variante"
        minimum: 0.0
      quantity:
        type: "integer"
        description: "Quantidade desta variante em estoque, se aplica quando product.trackInventory\
          \ estiver marcado como verdadeiro"
        minimum: 0.0
      erpId:
        type: "string"
        description: "O código do sistema de ERP associado a esta variante, normalmente\
          \ é o código de barras"
      definition1Value:
        type: "string"
        description: "O valor da primeira definição desta variante. Exmplo: Azul"
      definition2Value:
        type: "string"
        description: "O valor da segunda definição desta variante. Exmplo: P"
      imageUrl:
        type: "string"
        format: "url"
        description: "A url da imagem desta variante"
      visible:
        type: "boolean"
        description: "Se falso então esta variante não poderá ser incluida em um pedido"
        default: true
  Variants:
    type: "object"
    properties:
      results:
        type: "array"
        description: "Lista de variantes"
        items:
          $ref: "#/definitions/Variant"
  ResponseEmpty:
    type: "object"
    title: "ResponseEmpty Schema"
  Customers:
    type: "object"
    properties:
      results:
        type: "array"
        description: "Lista de clientes"
        items:
          $ref: "#/definitions/Customer"
    description: "O cliente (customers) é o comprador cadastrado na loja e que pode\
      \ efetuar pedidos. Pode ser do tipo pessoa física ou jurídica."
  Note:
    type: "object"
    properties:
      text:
        type: "string"
        description: "Texto desta nota"
  OrderPaymentMethodEnum:
    type: "string"
    enum:
    - "CREDITCARD"
    - "BOLETO"
